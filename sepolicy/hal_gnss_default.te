allowxperm hal_gnss_default self:socket ioctl msm_sock_ipc_ioctls;
allowxperm hal_gnss_default self:udp_socket ioctl priv_sock_ioctls;

allow hal_gnss_default sysfs_msm_subsys:dir { search read open };
allow hal_gnss_default sysfs_msm_subsys:file rw_file_perms;
allow hal_gnss_default sysfs_msm_subsys:lnk_file { read open };
allow hal_gnss_default location_data_file:dir { search read open write add_name };
allow hal_gnss_default location_data_file:file { read write getattr setattr open };
allow hal_gnss_default location_data_file:fifo_file create_file_perms;
allow hal_gnss_default location_data_file:fifo_file { create unlink setattr };
allow hal_gnss_default self:socket ioctl;
allow hal_gnss_default self:netlink_socket create_socket_perms_no_ioctl;
allow hal_gnss_default qmux:unix_stream_socket connectto;
allow hal_gnss_default qmuxd_socket:dir { open search read write add_name remove_name };
allow hal_gnss_default qmuxd_socket:file rw_file_perms;
allow hal_gnss_default qmuxd_socket:sock_file create_file_perms;
allow hal_gnss_default qmuxd_socket:sock_file { create unlink setattr write };
allow hal_gnss_default sysfs:file r_file_perms;
allow hal_gnss_default hal_gnss_default:socket { read write create };

# Most HALs are not allowed to use network sockets. Qcom library
# libqdi is used across multiple processes which are clients of
# netmgrd including the GNSS HAL. libqdi first attempts to get the network
# interface using an IOCTL on a UDP INET socket, which isn't allowed here.
# If that fails, it falls back to using libc's if_nameindex() which requires
# a netlink route socket, which HALs may use. Due to the initial
# attempt to use a UDP socket, we still see a selinux denial,
# but it is safe to ignore.
# TODO (b/37730994) Remove udp_socket requirement from
# libqdi and have all its clients use netlink route
# sockets.
dontaudit hal_gnss_default self:udp_socket create;
